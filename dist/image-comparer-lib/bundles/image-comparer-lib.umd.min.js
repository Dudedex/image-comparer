!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/forms"),require("ngx-image-cropper"),require("angular-resizable-element"),require("@angular/platform-browser"),require("@angular/core")):"function"==typeof define&&define.amd?define("image-comparer-lib",["exports","@angular/forms","ngx-image-cropper","angular-resizable-element","@angular/platform-browser","@angular/core"],t):t(e["image-comparer-lib"]={},e.ng.forms,e.ngxImageCropper,e.angularResizableElement,e.ng.platformBrowser,e.ng.core)}(this,function(e,t,i,n,r,a){"use strict";var o=function(){function e(){}return e.decorators=[{type:a.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[]},e.ngInjectableDef=a.defineInjectable({factory:function(){return new e},token:e,providedIn:"root"}),e}(),p=function(){function e(){}return e.prototype.ngOnInit=function(){},e.decorators=[{type:a.Component,args:[{selector:"lib-image-comparer-lib",template:"\n    <app-image-container-panel></app-image-container-panel>\n  "}]}],e.ctorParameters=function(){return[]},e}(),g=function(){function e(){this.imageChangedEvent="",this.imageChanged=new a.EventEmitter}return e.prototype.ngOnInit=function(){},e.prototype.clickUpload=function(){this.uploadButton.nativeElement.click()},e.prototype.fileChangeEvent=function(e){this.imageChangedEvent=e},e.prototype.imageCropped=function(e){this.image.image=e.base64,this.imageChanged.emit()},e.prototype.imageLoaded=function(){this.showCropper=!0},e.prototype.cropperReady=function(){},e.prototype.loadImageFailed=function(){},e.prototype.rotateLeft=function(){this.imageCropper.rotateLeft()},e.prototype.rotateRight=function(){this.imageCropper.rotateRight()},e.prototype.flipHorizontal=function(){this.imageCropper.flipHorizontal()},e.prototype.flipVertical=function(){this.imageCropper.flipVertical()},e.decorators=[{type:a.Component,args:[{selector:"app-image-cropper",template:'<input class="btn btn-primary" type="file" type="file" style="display: none" (change)="fileChangeEvent($event)" #upload/>\n<button class="btn btn-secondary big-btn" (click)="clickUpload()"><img width="20px" src="assets/pictures/upload.png">\n  Upload {{image.type}} Image\n</button>\n<div class="btn-bar">\n  <button class="cropp-btn" (click)="rotateLeft()"><img width="20px" src="assets/pictures/left.png"></button>\n  <button class="cropp-btn" (click)="rotateRight()"><img width="20px" src="assets/pictures/right.png"></button>\n  <button class="cropp-btn" (click)="flipHorizontal()"><img width="20px" src="assets/pictures/horizontally.png">\n  </button>\n  <button class="cropp-btn" (click)="flipVertical()"><img width="20px" src="assets/pictures/vertically.png"></button>\n</div>\n<div class="cropper-container">\n  <image-cropper\n    [imageChangedEvent]="imageChangedEvent"\n    [aspectRatio]="image.format"\n    format="png"\n    resizeToWidth="800"\n    (imageCropped)="imageCropped($event)"\n    (imageLoaded)="imageLoaded()"\n    (cropperReady)="cropperReady()"\n    (loadImageFailed)="loadImageFailed()"\n    outputType="base64"\n    #cropper\n  ></image-cropper>\n</div>\n',styles:[".cropper-container{height:300px}.cropp-btn{margin:1rem;background-color:#fff}.cropp-img{width:20px}.big-btn{width:100%}.btn-bar{width:225px;margin:0 auto}"]}]}],e.ctorParameters=function(){return[]},e.propDecorators={imageCropper:[{type:a.ViewChild,args:["cropper"]}],uploadButton:[{type:a.ViewChild,args:["upload"]}],image:[{type:a.Input}],format:[{type:a.Input}],imageChanged:[{type:a.Output}]},e}(),s=function d(){},m=function(){function e(){}return e.prototype.ngOnInit=function(){this.initWidth(),this.leftImage=new s,this.leftImage.type="left",this.rightImage=new s,this.rightImage.type="right"},e.prototype.ngOnChanges=function(e){},e.prototype.initWidth=function(){this.mainFramWidth=$("#main-frame").width(),this.leftContainerWidth=this.mainFramWidth/2-2,this.rightContainerWidth=this.mainFramWidth;var e=$("#left-picture-id").height()+50;return isNaN(e)&&(e=$("#right-picture-id").height()+50),this.leftContainerHeight=e,this.handleMargin=this.leftContainerHeight-50,!0},e.prototype.onResizeEnd=function(e){this.leftContainerWidth=this.leftContainerWidth+e.edges.right-2},e.decorators=[{type:a.Component,args:[{selector:"app-image-container-panel",template:'<div class="outer-picture-container" (window:resize)="initWidth()">\n  <app-image-loading-form [leftImage]="leftImage" [rightImage]="rightImage"\n                          (imageChanged)="initWidth()"></app-image-loading-form>\n  <hr>\n  <div class="outer-picture-container" id="outer-conatiner-id">\n    <div id="main-frame" class="image-display">\n      <img class="picture" *ngIf="leftImage && leftImage.image" id="left-picture-id" [style.display]="\'none\'" [style.width.px]="mainFramWidth" [src]="leftImage.image">\n      <img class="picture" *ngIf="rightImage && rightImage.image" id="right-picture-id" [style.display]="\'none\'" [style.width.px]="mainFramWidth" [src]="rightImage.image">\n      <div *ngIf="leftImage && leftImage.image && rightImage && rightImage.image">\n        <div id="picture-container1" [style.width.px]="mainFramWidth / 2 -2" *ngIf="leftImage && leftImage.image" [style.width.px]="leftContainerWidth" [style.height.px]="leftContainerHeight"\n             class="picture-container--left" mwlResizable\n             [enableGhostResize]="true" (resizeEnd)="onResizeEnd($event)">\n          <img class="picture" [style.width.px]="mainFramWidth" [src]="leftImage.image">\n          <div class="handle" mwlResizeHandle [style.height.%]="100" [resizeEdges]="{ right: true}">\n            <div class="knob" [style.margin-top.px]="handleMargin">\n              -<br>-<br>-<br>-<br>-<br>-<br>-\n            </div>\n          </div>\n        </div>\n        <div class="picture-container--right" [style.width.px]="mainFramWidth" *ngIf="rightImage && rightImage.image">\n          <img class="picture" [style.width.px]="mainFramWidth" [src]="rightImage.image">\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class="clearfix"></div>\n',styles:[".outer-picture-container{max-width:800px;margin:0 auto}.image-display{max-width:760px;margin:0 auto;position:relative}.clearfix{clear:both}.picture-container--left{overflow-x:hidden;overflow-y:hidden;float:left;position:absolute;top:0;left:0;z-index:7}.handle{position:absolute;top:0;right:0;height:100px;border-right:1px solid #fff;border-left:1px solid #000}.handle .knob{position:absolute;width:12px;height:50px;margin-left:-12px;background-color:#fff;color:#000;line-height:.5;z-index:100;text-align:center;border:1px solid #000;cursor:-webkit-grab;cursor:grab}.picture-container--right{overflow-x:hidden;float:left;z-index:5}"]}]}],e.ctorParameters=function(){return[]},e}(),l=function(){function e(){this.formatX=16,this.formatY=9,this.imageChanged=new a.EventEmitter}return e.prototype.ngOnInit=function(){this.imageChanged.emit(),this.saveFormat()},e.prototype.ngOnChanges=function(e){this.imageChanged.emit()},e.prototype.saveFormat=function(){this.leftImage.format=this.formatX/this.formatY,this.rightImage.format=this.formatX/this.formatY},e.decorators=[{type:a.Component,args:[{selector:"app-image-loading-form",template:'<div class="page">\n  <div>\n    <div class="cropper-container">\n      Format: <input type="number" class="numberInput" [(ngModel)]="formatX" (change)="saveFormat()"> / <input class="numberInput" type="number" [(ngModel)]="formatY" (change)="saveFormat()">\n    </div>\n  </div>\n  <hr>\n  <div class="col-sm-6">\n    <app-image-cropper [image]="leftImage" (imageChanged)="imageChanged.emit()"></app-image-cropper>\n  </div>\n  <div class="col-sm-6">\n    <app-image-cropper [image]="rightImage" (imageChanged)="imageChanged.emit()"></app-image-cropper>\n  </div>\n</div>\n<div class="clearfix"></div>\n\n',styles:[".page{max-width:800px;margin:0 auto 3rem;position:relative}.clearfix{clear:both}.cropper-container{max-width:200px;padding:1rem;margin:0 auto}.numberInput{width:5rem}"]}]}],e.ctorParameters=function(){return[]},e.propDecorators={imageChanged:[{type:a.Output}],leftImage:[{type:a.Input}],rightImage:[{type:a.Input}]},e}(),c=function(){function e(){}return e.decorators=[{type:a.NgModule,args:[{declarations:[p,g,m,l],imports:[r.BrowserModule,n.ResizableModule,t.FormsModule,i.ImageCropperModule],providers:[n.ResizableDirective],exports:[p]}]}],e}();e.ImageComparerLibService=o,e.ImageComparerLibComponent=p,e.ImageComparerLibModule=c,e.ɵb=m,e.ɵa=g,e.ɵc=l,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=image-comparer-lib.umd.min.js.map