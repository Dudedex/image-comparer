{"version":3,"sources":["ng://image-comparer-lib/lib/image-comparer-lib.service.ts","ng://image-comparer-lib/lib/translation/de.ts","ng://image-comparer-lib/lib/translation/en.ts","ng://image-comparer-lib/lib/translation/translation-provider.ts","ng://image-comparer-lib/lib/image-comparer-lib.component.ts","ng://image-comparer-lib/lib/image-cropper/image-cropper.component.ts","ng://image-comparer-lib/lib/classes/image-details.ts","ng://image-comparer-lib/lib/image-container-panel/image-container-panel.component.ts","ng://image-comparer-lib/lib/image-loading-form/image-loading-form.component.ts","ng://image-comparer-lib/lib/image-comparer-lib.module.ts"],"names":["ImageComparerLibService","Injectable","args","providedIn","De","translation","page.imageComparer.upload.image.left","page.imageComparer.upload.image.right","page.imageComparer.upload.image.missing","En","TranslationProvider","setupTranslationProvider","translate","defaultLocale","setTranslation","setDefaultLang","ImageComparerLibComponent","this","prototype","ngOnInit","translationSetup","ngOnChanges","changes","locale","Component","selector","template","TranslateService","Input","ImageCropperComponent","imageChangedEvent","imageChanged","EventEmitter","clickUpload","uploadButton","nativeElement","click","fileChangeEvent","event","imageCropped","image","base64","emit","imageLoaded","showCropper","cropperReady","loadImageFailed","rotateLeft","imageCropper","rotateRight","flipHorizontal","flipVertical","ViewChild","Output","ImageDetails","ImageContainerPanelComponent","initWidth","leftImage","type","rightImage","mainFramWidth","$","width","leftContainerWidth","rightContainerWidth","height","isNaN","leftContainerHeight","handleMargin","onResizeEnd","edges","right","ImageLoadingFormComponent","formatX","formatY","saveFormat","format","ImageComparerLibModule","NgModule","declarations","imports","BrowserModule","ResizableModule","FormsModule","ImageCropperModule","TranslateModule","forRoot","providers","ResizableDirective","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageComparerLibService {\n\n  constructor() { }\n}\n","export class De {\r\n  public static translation() {\r\n    return {\r\n      // Translation Keys\r\n      'page.imageComparer.upload.image.left': 'Linkes Bild Ã¶ffnen',\r\n      'page.imageComparer.upload.image.right': 'Rechtes Bild Ã¶ffnen',\r\n\r\n      'page.imageComparer.upload.image.missing': 'Bitte zwei Bilder Ã¶ffnen',\r\n    };\r\n  }\r\n}\r\n","export class En {\r\n  public static translation() {\r\n    return {\r\n      // Translation Keys\r\n      'page.imageComparer.upload.image.left': 'Open left image',\r\n      'page.imageComparer.upload.image.right': 'Open right image',\r\n\r\n      'page.imageComparer.upload.image.missing': 'Open two images please',\r\n    };\r\n  }\r\n}\r\n","import {TranslateService} from '@ngx-translate/core';\r\nimport {De} from './de';\r\nimport {En} from './en';\r\n\r\nexport class TranslationProvider {\r\n  public static setupTranslationProvider(translate: TranslateService, defaultLocale?: string) {\r\n    translate.setTranslation('de', De.translation(), true);\r\n    translate.setTranslation('en', En.translation(), true);\r\n    if (defaultLocale) {\r\n      translate.setDefaultLang(defaultLocale);\r\n    } else {\r\n      translate.setDefaultLang('de');\r\n    }\r\n  }\r\n}\r\n","import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport {TranslationProvider} from './translation/translation-provider';\n\n@Component({\n  selector: 'lib-image-comparer-lib',\n  template: `\n    <app-image-container-panel></app-image-container-panel>\n  `,\n  styles: []\n})\nexport class ImageComparerLibComponent implements OnInit, OnChanges {\n\n  @Input()\n  public locale: string;\n\n  constructor(private translate: TranslateService) { }\n\n  ngOnInit() {\n    this.translationSetup();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.translationSetup();\n  }\n\n  private translationSetup() {\n    TranslationProvider.setupTranslationProvider(this.translate, this.locale);\n  }\n\n}\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {ImageDetails} from '../classes/image-details';\nimport {ImageCroppedEvent} from 'ngx-image-cropper';\n\n@Component({\n  selector: 'app-image-cropper',\n  templateUrl: './image-cropper.component.html',\n  styleUrls: ['./image-cropper.component.css']\n})\nexport class ImageCropperComponent implements OnInit {\n\n  public imageChangedEvent: any = '';\n  public showCropper;\n\n  @ViewChild('cropper') imageCropper: ImageCropperComponent;\n\n  @ViewChild('upload') uploadButton: ElementRef;\n\n  @Input()\n  public image: ImageDetails;\n\n  @Input()\n  public format: number;\n\n  @Output()\n  public imageChanged = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  public clickUpload() {\n    this.uploadButton.nativeElement.click();\n  }\n\n  fileChangeEvent(event: any): void {\n    this.imageChangedEvent = event;\n  }\n\n  imageCropped(event: ImageCroppedEvent) {\n    this.image.image = event.base64;\n    this.imageChanged.emit();\n  }\n\n  imageLoaded() {\n    this.showCropper = true;\n  }\n\n  cropperReady() {\n  }\n\n  loadImageFailed() {\n  }\n\n  rotateLeft() {\n    this.imageCropper.rotateLeft();\n  }\n\n  rotateRight() {\n    this.imageCropper.rotateRight();\n  }\n\n  flipHorizontal() {\n    this.imageCropper.flipHorizontal();\n  }\n\n  flipVertical() {\n    this.imageCropper.flipVertical();\n  }\n\n}\n","export class ImageDetails {\r\n  public image: any;\r\n  public format: number;\r\n  public type: string;\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {ImageDetails} from '../classes/image-details';\n\n@Component({\n  selector: 'app-image-container-panel',\n  templateUrl: './image-container-panel.component.html',\n  styleUrls: ['./image-container-panel.component.css']\n})\nexport class ImageContainerPanelComponent implements OnInit, OnChanges {\n  public mainFramWidth;\n  public leftContainerWidth;\n  public rightContainerWidth;\n  public leftContainerHeight;\n  public handleMargin;\n  public leftImage: ImageDetails;\n  public rightImage: ImageDetails;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.initWidth();\n    this.leftImage = new ImageDetails();\n    this.leftImage.type = 'left';\n    this.rightImage = new ImageDetails();\n    this.rightImage.type = 'right';\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n  }\n\n  public initWidth() {\n    this.mainFramWidth = $('#main-frame').width();\n    this.leftContainerWidth = this.mainFramWidth / 2 - 2;\n    this.rightContainerWidth = this.mainFramWidth;\n    let height = ($('#left-picture-id').height()) + 50;\n    if (isNaN(height)) {\n      height = ($('#right-picture-id').height()) + 50;\n    }\n    this.leftContainerHeight = height;\n    this.handleMargin = this.leftContainerHeight - 50;\n\n    return true;\n  }\n\n  public onResizeEnd(event: any) {\n    this.leftContainerWidth = this.leftContainerWidth + event.edges.right - 2;\n  }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {ImageDetails} from '../classes/image-details';\n\n@Component({\n  selector: 'app-image-loading-form',\n  templateUrl: './image-loading-form.component.html',\n  styleUrls: ['./image-loading-form.component.css']\n})\nexport class ImageLoadingFormComponent implements OnInit, OnChanges {\n\n  public formatX = 16;\n  public formatY = 9;\n\n  @Output()\n  public imageChanged = new EventEmitter();\n\n  @Input()\n  public leftImage: ImageDetails;\n\n  @Input()\n  public rightImage: ImageDetails;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.imageChanged.emit();\n    this.saveFormat();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.imageChanged.emit();\n  }\n\n  public saveFormat() {\n    this.leftImage.format = this.formatX / this.formatY;\n    this.rightImage.format = this.formatX / this.formatY;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ImageComparerLibComponent } from './image-comparer-lib.component';\nimport {FormsModule} from '@angular/forms';\nimport {ImageCropperModule} from 'ngx-image-cropper';\nimport {ResizableDirective, ResizableModule} from 'angular-resizable-element';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {ImageCropperComponent} from './image-cropper/image-cropper.component';\nimport {ImageContainerPanelComponent} from './image-container-panel/image-container-panel.component';\nimport {ImageLoadingFormComponent} from './image-loading-form/image-loading-form.component';\nimport {TranslateModule} from '@ngx-translate/core';\nimport * as $ from 'jquery';\n\n@NgModule({\n  declarations: [\n    ImageComparerLibComponent,\n    ImageCropperComponent,\n    ImageContainerPanelComponent,\n    ImageLoadingFormComponent\n  ],\n  imports: [\n    BrowserModule,\n    ResizableModule,\n    FormsModule,\n    ImageCropperModule,\n    TranslateModule.forRoot()\n  ],\n  providers: [\n    ResizableDirective\n  ],\n  exports: [ImageComparerLibComponent]\n})\nexport class ImageComparerLibModule { }\n"]}