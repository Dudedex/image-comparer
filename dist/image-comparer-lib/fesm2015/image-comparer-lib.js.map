{"version":3,"file":"image-comparer-lib.js.map","sources":["ng://image-comparer-lib/lib/image-comparer-lib.service.ts","ng://image-comparer-lib/lib/translation/de.ts","ng://image-comparer-lib/lib/translation/en.ts","ng://image-comparer-lib/lib/translation/translation-provider.ts","ng://image-comparer-lib/lib/image-comparer-lib.component.ts","ng://image-comparer-lib/lib/classes/image-details.ts","ng://image-comparer-lib/lib/image-cropper/image-cropper.component.ts","ng://image-comparer-lib/lib/image-container-panel/image-container-panel.component.ts","ng://image-comparer-lib/lib/image-loading-form/image-loading-form.component.ts","ng://image-comparer-lib/lib/image-comparer-lib.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageComparerLibService {\n\n  constructor() { }\n}\n","export class De {\r\n  public static translation() {\r\n    return {\r\n      // Translation Keys\r\n      'page.imageComparer.upload.image.left': 'Linkes Bild Ã¶ffnen',\r\n      'page.imageComparer.upload.image.right': 'Rechtes Bild Ã¶ffnen',\r\n\r\n      'page.imageComparer.upload.image.missing': 'Bitte zwei Bilder Ã¶ffnen',\r\n    };\r\n  }\r\n}\r\n","export class En {\r\n  public static translation() {\r\n    return {\r\n      // Translation Keys\r\n      'page.imageComparer.upload.image.left': 'Open left image',\r\n      'page.imageComparer.upload.image.right': 'Open right image',\r\n\r\n      'page.imageComparer.upload.image.missing': 'Open two images please',\r\n    };\r\n  }\r\n}\r\n","import {TranslateService} from '@ngx-translate/core';\r\nimport {De} from './de';\r\nimport {En} from './en';\r\n\r\nexport class TranslationProvider {\r\n  public static setupTranslationProvider(translate: TranslateService, defaultLocale?: string) {\r\n    translate.setTranslation('de', De.translation(), true);\r\n    translate.setTranslation('en', En.translation(), true);\r\n    if (defaultLocale) {\r\n      translate.setDefaultLang(defaultLocale);\r\n    } else {\r\n      translate.setDefaultLang('de');\r\n    }\r\n  }\r\n}\r\n","import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport {TranslationProvider} from './translation/translation-provider';\n\n@Component({\n  selector: 'lib-image-comparer-lib',\n  template: `\n    <app-image-container-panel></app-image-container-panel>\n  `,\n  styles: []\n})\nexport class ImageComparerLibComponent implements OnInit, OnChanges {\n\n  @Input()\n  public locale: string;\n\n  constructor(private translate: TranslateService) { }\n\n  ngOnInit() {\n    this.translationSetup();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.translationSetup();\n  }\n\n  private translationSetup() {\n    TranslationProvider.setupTranslationProvider(this.translate, this.locale);\n  }\n\n}\n","export class ImageDetails {\r\n  public image: any;\r\n  public format: number;\r\n  public type: string;\r\n}\r\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {ImageDetails} from '../classes/image-details';\nimport {ImageCroppedEvent} from 'ngx-image-cropper';\n\n@Component({\n  selector: 'app-image-cropper',\n  templateUrl: './image-cropper.component.html',\n  styleUrls: ['./image-cropper.component.css']\n})\nexport class ImageCropperComponent implements OnInit {\n\n  public imageChangedEvent: any = '';\n  public showCropper;\n\n  @ViewChild('cropper') imageCropper: ImageCropperComponent;\n\n  @ViewChild('upload') uploadButton: ElementRef;\n\n  @Input()\n  public image: ImageDetails;\n\n  @Input()\n  public format: number;\n\n  @Output()\n  public imageChanged = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  public clickUpload() {\n    this.uploadButton.nativeElement.click();\n  }\n\n  fileChangeEvent(event: any): void {\n    this.imageChangedEvent = event;\n  }\n\n  imageCropped(event: ImageCroppedEvent) {\n    this.image.image = event.base64;\n    this.imageChanged.emit();\n  }\n\n  imageLoaded() {\n    this.showCropper = true;\n  }\n\n  cropperReady() {\n  }\n\n  loadImageFailed() {\n  }\n\n  rotateLeft() {\n    this.imageCropper.rotateLeft();\n  }\n\n  rotateRight() {\n    this.imageCropper.rotateRight();\n  }\n\n  flipHorizontal() {\n    this.imageCropper.flipHorizontal();\n  }\n\n  flipVertical() {\n    this.imageCropper.flipVertical();\n  }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {ImageDetails} from '../classes/image-details';\n\n@Component({\n  selector: 'app-image-container-panel',\n  templateUrl: './image-container-panel.component.html',\n  styleUrls: ['./image-container-panel.component.css']\n})\nexport class ImageContainerPanelComponent implements OnInit, OnChanges {\n  public mainFramWidth;\n  public leftContainerWidth;\n  public rightContainerWidth;\n  public leftContainerHeight;\n  public handleMargin;\n  public leftImage: ImageDetails;\n  public rightImage: ImageDetails;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.initWidth();\n    this.leftImage = new ImageDetails();\n    this.leftImage.type = 'left';\n    this.rightImage = new ImageDetails();\n    this.rightImage.type = 'right';\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n  }\n\n  public initWidth() {\n    this.mainFramWidth = $('#main-frame').width();\n    this.leftContainerWidth = this.mainFramWidth / 2 - 2;\n    this.rightContainerWidth = this.mainFramWidth;\n    let height = ($('#left-picture-id').height()) + 50;\n    if (isNaN(height)) {\n      height = ($('#right-picture-id').height()) + 50;\n    }\n    this.leftContainerHeight = height;\n    this.handleMargin = this.leftContainerHeight - 50;\n\n    return true;\n  }\n\n  public onResizeEnd(event: any) {\n    this.leftContainerWidth = this.leftContainerWidth + event.edges.right - 2;\n  }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {ImageDetails} from '../classes/image-details';\n\n@Component({\n  selector: 'app-image-loading-form',\n  templateUrl: './image-loading-form.component.html',\n  styleUrls: ['./image-loading-form.component.css']\n})\nexport class ImageLoadingFormComponent implements OnInit, OnChanges {\n\n  public formatX = 16;\n  public formatY = 9;\n\n  @Output()\n  public imageChanged = new EventEmitter();\n\n  @Input()\n  public leftImage: ImageDetails;\n\n  @Input()\n  public rightImage: ImageDetails;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.imageChanged.emit();\n    this.saveFormat();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.imageChanged.emit();\n  }\n\n  public saveFormat() {\n    this.leftImage.format = this.formatX / this.formatY;\n    this.rightImage.format = this.formatX / this.formatY;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ImageComparerLibComponent } from './image-comparer-lib.component';\nimport {FormsModule} from '@angular/forms';\nimport {ImageCropperModule} from 'ngx-image-cropper';\nimport {ResizableDirective, ResizableModule} from 'angular-resizable-element';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {ImageCropperComponent} from './image-cropper/image-cropper.component';\nimport {ImageContainerPanelComponent} from './image-container-panel/image-container-panel.component';\nimport {ImageLoadingFormComponent} from './image-loading-form/image-loading-form.component';\nimport {TranslateModule} from '@ngx-translate/core';\nimport * as $ from 'jquery';\n\n@NgModule({\n  declarations: [\n    ImageComparerLibComponent,\n    ImageCropperComponent,\n    ImageContainerPanelComponent,\n    ImageLoadingFormComponent\n  ],\n  imports: [\n    BrowserModule,\n    ResizableModule,\n    FormsModule,\n    ImageCropperModule,\n    TranslateModule.forRoot()\n  ],\n  providers: [\n    ResizableDirective\n  ],\n  exports: [ImageComparerLibComponent]\n})\nexport class ImageComparerLibModule { }\n"],"names":[],"mappings":"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"}
